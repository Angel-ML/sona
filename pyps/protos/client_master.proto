syntax = "proto3";

package ClientMaster;

option java_multiple_files = true;
option java_generic_services = true;
option java_package = "com.tencent.client.master.protos";
option java_outer_classname = "ClientMasterProto";

import "common.proto";

enum Command {
    STOPANGEL = 0;
    STOPPSAGENT = 1;
    STOPWORKER = 2;
    NOTHING = 3;
}

message RegisterWorkerReq {
    string host = 1;
    int32 port = 2;
}

message RegisterWorkerResp {
    int32 ret = 1;
    int64 workId = 2;
    bool isChief = 3;
    AsyncModel asyncModel = 5;
    map<string, string> conf = 6;
    int32 heartBeatInterval = 7;
}

message RegisterTaskReq {
    int64 workId = 2;
    int64 timestamp = 3;
}

message RegisterTaskResp {
    int64 taskId = 2;
    int32 numTask = 4;
    map<int64, int32> clock = 3;
}

message SetAngelLocationReq {
    int64 workId = 1;
    string host = 2;
    int32 port = 3;
}

message GetAngelLocationResp {
    string host = 2;
    int32 port = 3;
    string msg = 4;
}

message HeartBeatReq {
    int64 workId = 1;
}

message HeartBeatResp {
    Command cmd = 3;
}

message ClockReq {
    int64 taskId = 1;
    int32 clock = 2;
    int32 batchSize = 3;
}

message ClockResp {
    int64 taskId = 1;
    map<int64, int32> clockMap = 2;
}

message GetClockMapReq {
    int64 taskId = 1;
}

message GetClockMapResp {
    int64 taskId = 1;
    map<int64, int32> clockMap = 2;
}

message GetGlobalBatchResp {
    int32 batchSize = 1;
}

service AngelCleintMaster {
    rpc RegisterWorker (RegisterWorkerReq) returns (RegisterWorkerResp) {
    }
    rpc RegisterTask (RegisterTaskReq) returns (RegisterTaskResp) {
    }
    rpc SetAngelLocation (SetAngelLocationReq) returns (VoidResp) {
    }
    rpc GetAngelLocation (VoidReq) returns (GetAngelLocationResp) {
    }
    rpc HeartBeat (HeartBeatReq) returns (HeartBeatResp) {
    }
    rpc Clock (ClockReq) returns (ClockResp) {
    }
    rpc GetClockMap (GetClockMapReq) returns (GetClockMapResp) {
    }
    rpc GetGlobalBatchSize (VoidReq) returns (GetGlobalBatchResp) {
    }
    rpc CompleteTask (CompleteTaskReq) returns (VoidResp) {
    }
}
