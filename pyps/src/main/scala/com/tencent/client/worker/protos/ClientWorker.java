// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_worker.proto

package com.tencent.client.worker.protos;

/**
 * Protobuf service {@code ClientMaster.ClientWorker}
 */
public  abstract class ClientWorker
    implements com.google.protobuf.Service {
  protected ClientWorker() {}

  public interface Interface {
    /**
     * <code>rpc CreateTensor(.ClientMaster.RPCTensor) returns (.ClientMaster.CreateResp);</code>
     */
    public abstract void createTensor(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.RPCTensor request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.CreateResp> done);

    /**
     * <code>rpc CreateVariable(.ClientMaster.RPCVariable) returns (.ClientMaster.CreateResp);</code>
     */
    public abstract void createVariable(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.RPCVariable request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.CreateResp> done);

    /**
     * <code>rpc CreateEmbedding(.ClientMaster.RPCEmbedding) returns (.ClientMaster.CreateResp);</code>
     */
    public abstract void createEmbedding(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.RPCEmbedding request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.CreateResp> done);

    /**
     * <code>rpc Init(.ClientMaster.TensorLike) returns (.ClientMaster.VoidResponse);</code>
     */
    public abstract void init(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.TensorLike request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done);

    /**
     * <code>rpc Load(.ClientMaster.LoadTensorLike) returns (.ClientMaster.VoidResponse);</code>
     */
    public abstract void load(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.LoadTensorLike request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done);

    /**
     * <code>rpc Save(.ClientMaster.SaveTensorLike) returns (.ClientMaster.VoidResponse);</code>
     */
    public abstract void save(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.SaveTensorLike request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done);

    /**
     * <code>rpc Pull(.ClientMaster.PullRequest) returns (.ClientMaster.PullResponse);</code>
     */
    public abstract void pull(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.PullRequest request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.PullResponse> done);

    /**
     * <code>rpc Push(.ClientMaster.PushRequest) returns (.ClientMaster.VoidResponse);</code>
     */
    public abstract void push(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.PushRequest request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done);

    /**
     * <code>rpc Release(.ClientMaster.TensorLike) returns (.ClientMaster.VoidResponse);</code>
     */
    public abstract void release(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.TensorLike request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done);

    /**
     * <code>rpc Update(.ClientMaster.TensorLike) returns (.ClientMaster.VoidResponse);</code>
     */
    public abstract void update(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.TensorLike request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done);

    /**
     * <code>rpc Sync(.ClientMaster.SyncRequest) returns (.ClientMaster.VoidResponse);</code>
     */
    public abstract void sync(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.SyncRequest request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new ClientWorker() {
      @java.lang.Override
      public  void createTensor(
          com.google.protobuf.RpcController controller,
          com.tencent.client.worker.protos.RPCTensor request,
          com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.CreateResp> done) {
        impl.createTensor(controller, request, done);
      }

      @java.lang.Override
      public  void createVariable(
          com.google.protobuf.RpcController controller,
          com.tencent.client.worker.protos.RPCVariable request,
          com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.CreateResp> done) {
        impl.createVariable(controller, request, done);
      }

      @java.lang.Override
      public  void createEmbedding(
          com.google.protobuf.RpcController controller,
          com.tencent.client.worker.protos.RPCEmbedding request,
          com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.CreateResp> done) {
        impl.createEmbedding(controller, request, done);
      }

      @java.lang.Override
      public  void init(
          com.google.protobuf.RpcController controller,
          com.tencent.client.worker.protos.TensorLike request,
          com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done) {
        impl.init(controller, request, done);
      }

      @java.lang.Override
      public  void load(
          com.google.protobuf.RpcController controller,
          com.tencent.client.worker.protos.LoadTensorLike request,
          com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done) {
        impl.load(controller, request, done);
      }

      @java.lang.Override
      public  void save(
          com.google.protobuf.RpcController controller,
          com.tencent.client.worker.protos.SaveTensorLike request,
          com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done) {
        impl.save(controller, request, done);
      }

      @java.lang.Override
      public  void pull(
          com.google.protobuf.RpcController controller,
          com.tencent.client.worker.protos.PullRequest request,
          com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.PullResponse> done) {
        impl.pull(controller, request, done);
      }

      @java.lang.Override
      public  void push(
          com.google.protobuf.RpcController controller,
          com.tencent.client.worker.protos.PushRequest request,
          com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done) {
        impl.push(controller, request, done);
      }

      @java.lang.Override
      public  void release(
          com.google.protobuf.RpcController controller,
          com.tencent.client.worker.protos.TensorLike request,
          com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done) {
        impl.release(controller, request, done);
      }

      @java.lang.Override
      public  void update(
          com.google.protobuf.RpcController controller,
          com.tencent.client.worker.protos.TensorLike request,
          com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done) {
        impl.update(controller, request, done);
      }

      @java.lang.Override
      public  void sync(
          com.google.protobuf.RpcController controller,
          com.tencent.client.worker.protos.SyncRequest request,
          com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done) {
        impl.sync(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.createTensor(controller, (com.tencent.client.worker.protos.RPCTensor)request);
          case 1:
            return impl.createVariable(controller, (com.tencent.client.worker.protos.RPCVariable)request);
          case 2:
            return impl.createEmbedding(controller, (com.tencent.client.worker.protos.RPCEmbedding)request);
          case 3:
            return impl.init(controller, (com.tencent.client.worker.protos.TensorLike)request);
          case 4:
            return impl.load(controller, (com.tencent.client.worker.protos.LoadTensorLike)request);
          case 5:
            return impl.save(controller, (com.tencent.client.worker.protos.SaveTensorLike)request);
          case 6:
            return impl.pull(controller, (com.tencent.client.worker.protos.PullRequest)request);
          case 7:
            return impl.push(controller, (com.tencent.client.worker.protos.PushRequest)request);
          case 8:
            return impl.release(controller, (com.tencent.client.worker.protos.TensorLike)request);
          case 9:
            return impl.update(controller, (com.tencent.client.worker.protos.TensorLike)request);
          case 10:
            return impl.sync(controller, (com.tencent.client.worker.protos.SyncRequest)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.tencent.client.worker.protos.RPCTensor.getDefaultInstance();
          case 1:
            return com.tencent.client.worker.protos.RPCVariable.getDefaultInstance();
          case 2:
            return com.tencent.client.worker.protos.RPCEmbedding.getDefaultInstance();
          case 3:
            return com.tencent.client.worker.protos.TensorLike.getDefaultInstance();
          case 4:
            return com.tencent.client.worker.protos.LoadTensorLike.getDefaultInstance();
          case 5:
            return com.tencent.client.worker.protos.SaveTensorLike.getDefaultInstance();
          case 6:
            return com.tencent.client.worker.protos.PullRequest.getDefaultInstance();
          case 7:
            return com.tencent.client.worker.protos.PushRequest.getDefaultInstance();
          case 8:
            return com.tencent.client.worker.protos.TensorLike.getDefaultInstance();
          case 9:
            return com.tencent.client.worker.protos.TensorLike.getDefaultInstance();
          case 10:
            return com.tencent.client.worker.protos.SyncRequest.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.tencent.client.worker.protos.CreateResp.getDefaultInstance();
          case 1:
            return com.tencent.client.worker.protos.CreateResp.getDefaultInstance();
          case 2:
            return com.tencent.client.worker.protos.CreateResp.getDefaultInstance();
          case 3:
            return com.tencent.client.worker.protos.VoidResponse.getDefaultInstance();
          case 4:
            return com.tencent.client.worker.protos.VoidResponse.getDefaultInstance();
          case 5:
            return com.tencent.client.worker.protos.VoidResponse.getDefaultInstance();
          case 6:
            return com.tencent.client.worker.protos.PullResponse.getDefaultInstance();
          case 7:
            return com.tencent.client.worker.protos.VoidResponse.getDefaultInstance();
          case 8:
            return com.tencent.client.worker.protos.VoidResponse.getDefaultInstance();
          case 9:
            return com.tencent.client.worker.protos.VoidResponse.getDefaultInstance();
          case 10:
            return com.tencent.client.worker.protos.VoidResponse.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <code>rpc CreateTensor(.ClientMaster.RPCTensor) returns (.ClientMaster.CreateResp);</code>
   */
  public abstract void createTensor(
      com.google.protobuf.RpcController controller,
      com.tencent.client.worker.protos.RPCTensor request,
      com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.CreateResp> done);

  /**
   * <code>rpc CreateVariable(.ClientMaster.RPCVariable) returns (.ClientMaster.CreateResp);</code>
   */
  public abstract void createVariable(
      com.google.protobuf.RpcController controller,
      com.tencent.client.worker.protos.RPCVariable request,
      com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.CreateResp> done);

  /**
   * <code>rpc CreateEmbedding(.ClientMaster.RPCEmbedding) returns (.ClientMaster.CreateResp);</code>
   */
  public abstract void createEmbedding(
      com.google.protobuf.RpcController controller,
      com.tencent.client.worker.protos.RPCEmbedding request,
      com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.CreateResp> done);

  /**
   * <code>rpc Init(.ClientMaster.TensorLike) returns (.ClientMaster.VoidResponse);</code>
   */
  public abstract void init(
      com.google.protobuf.RpcController controller,
      com.tencent.client.worker.protos.TensorLike request,
      com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done);

  /**
   * <code>rpc Load(.ClientMaster.LoadTensorLike) returns (.ClientMaster.VoidResponse);</code>
   */
  public abstract void load(
      com.google.protobuf.RpcController controller,
      com.tencent.client.worker.protos.LoadTensorLike request,
      com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done);

  /**
   * <code>rpc Save(.ClientMaster.SaveTensorLike) returns (.ClientMaster.VoidResponse);</code>
   */
  public abstract void save(
      com.google.protobuf.RpcController controller,
      com.tencent.client.worker.protos.SaveTensorLike request,
      com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done);

  /**
   * <code>rpc Pull(.ClientMaster.PullRequest) returns (.ClientMaster.PullResponse);</code>
   */
  public abstract void pull(
      com.google.protobuf.RpcController controller,
      com.tencent.client.worker.protos.PullRequest request,
      com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.PullResponse> done);

  /**
   * <code>rpc Push(.ClientMaster.PushRequest) returns (.ClientMaster.VoidResponse);</code>
   */
  public abstract void push(
      com.google.protobuf.RpcController controller,
      com.tencent.client.worker.protos.PushRequest request,
      com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done);

  /**
   * <code>rpc Release(.ClientMaster.TensorLike) returns (.ClientMaster.VoidResponse);</code>
   */
  public abstract void release(
      com.google.protobuf.RpcController controller,
      com.tencent.client.worker.protos.TensorLike request,
      com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done);

  /**
   * <code>rpc Update(.ClientMaster.TensorLike) returns (.ClientMaster.VoidResponse);</code>
   */
  public abstract void update(
      com.google.protobuf.RpcController controller,
      com.tencent.client.worker.protos.TensorLike request,
      com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done);

  /**
   * <code>rpc Sync(.ClientMaster.SyncRequest) returns (.ClientMaster.VoidResponse);</code>
   */
  public abstract void sync(
      com.google.protobuf.RpcController controller,
      com.tencent.client.worker.protos.SyncRequest request,
      com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return com.tencent.client.worker.protos.ClientWorkerProto.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.createTensor(controller, (com.tencent.client.worker.protos.RPCTensor)request,
          com.google.protobuf.RpcUtil.<com.tencent.client.worker.protos.CreateResp>specializeCallback(
            done));
        return;
      case 1:
        this.createVariable(controller, (com.tencent.client.worker.protos.RPCVariable)request,
          com.google.protobuf.RpcUtil.<com.tencent.client.worker.protos.CreateResp>specializeCallback(
            done));
        return;
      case 2:
        this.createEmbedding(controller, (com.tencent.client.worker.protos.RPCEmbedding)request,
          com.google.protobuf.RpcUtil.<com.tencent.client.worker.protos.CreateResp>specializeCallback(
            done));
        return;
      case 3:
        this.init(controller, (com.tencent.client.worker.protos.TensorLike)request,
          com.google.protobuf.RpcUtil.<com.tencent.client.worker.protos.VoidResponse>specializeCallback(
            done));
        return;
      case 4:
        this.load(controller, (com.tencent.client.worker.protos.LoadTensorLike)request,
          com.google.protobuf.RpcUtil.<com.tencent.client.worker.protos.VoidResponse>specializeCallback(
            done));
        return;
      case 5:
        this.save(controller, (com.tencent.client.worker.protos.SaveTensorLike)request,
          com.google.protobuf.RpcUtil.<com.tencent.client.worker.protos.VoidResponse>specializeCallback(
            done));
        return;
      case 6:
        this.pull(controller, (com.tencent.client.worker.protos.PullRequest)request,
          com.google.protobuf.RpcUtil.<com.tencent.client.worker.protos.PullResponse>specializeCallback(
            done));
        return;
      case 7:
        this.push(controller, (com.tencent.client.worker.protos.PushRequest)request,
          com.google.protobuf.RpcUtil.<com.tencent.client.worker.protos.VoidResponse>specializeCallback(
            done));
        return;
      case 8:
        this.release(controller, (com.tencent.client.worker.protos.TensorLike)request,
          com.google.protobuf.RpcUtil.<com.tencent.client.worker.protos.VoidResponse>specializeCallback(
            done));
        return;
      case 9:
        this.update(controller, (com.tencent.client.worker.protos.TensorLike)request,
          com.google.protobuf.RpcUtil.<com.tencent.client.worker.protos.VoidResponse>specializeCallback(
            done));
        return;
      case 10:
        this.sync(controller, (com.tencent.client.worker.protos.SyncRequest)request,
          com.google.protobuf.RpcUtil.<com.tencent.client.worker.protos.VoidResponse>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.tencent.client.worker.protos.RPCTensor.getDefaultInstance();
      case 1:
        return com.tencent.client.worker.protos.RPCVariable.getDefaultInstance();
      case 2:
        return com.tencent.client.worker.protos.RPCEmbedding.getDefaultInstance();
      case 3:
        return com.tencent.client.worker.protos.TensorLike.getDefaultInstance();
      case 4:
        return com.tencent.client.worker.protos.LoadTensorLike.getDefaultInstance();
      case 5:
        return com.tencent.client.worker.protos.SaveTensorLike.getDefaultInstance();
      case 6:
        return com.tencent.client.worker.protos.PullRequest.getDefaultInstance();
      case 7:
        return com.tencent.client.worker.protos.PushRequest.getDefaultInstance();
      case 8:
        return com.tencent.client.worker.protos.TensorLike.getDefaultInstance();
      case 9:
        return com.tencent.client.worker.protos.TensorLike.getDefaultInstance();
      case 10:
        return com.tencent.client.worker.protos.SyncRequest.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.tencent.client.worker.protos.CreateResp.getDefaultInstance();
      case 1:
        return com.tencent.client.worker.protos.CreateResp.getDefaultInstance();
      case 2:
        return com.tencent.client.worker.protos.CreateResp.getDefaultInstance();
      case 3:
        return com.tencent.client.worker.protos.VoidResponse.getDefaultInstance();
      case 4:
        return com.tencent.client.worker.protos.VoidResponse.getDefaultInstance();
      case 5:
        return com.tencent.client.worker.protos.VoidResponse.getDefaultInstance();
      case 6:
        return com.tencent.client.worker.protos.PullResponse.getDefaultInstance();
      case 7:
        return com.tencent.client.worker.protos.VoidResponse.getDefaultInstance();
      case 8:
        return com.tencent.client.worker.protos.VoidResponse.getDefaultInstance();
      case 9:
        return com.tencent.client.worker.protos.VoidResponse.getDefaultInstance();
      case 10:
        return com.tencent.client.worker.protos.VoidResponse.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends com.tencent.client.worker.protos.ClientWorker implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void createTensor(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.RPCTensor request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.CreateResp> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.tencent.client.worker.protos.CreateResp.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.tencent.client.worker.protos.CreateResp.class,
          com.tencent.client.worker.protos.CreateResp.getDefaultInstance()));
    }

    public  void createVariable(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.RPCVariable request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.CreateResp> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.tencent.client.worker.protos.CreateResp.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.tencent.client.worker.protos.CreateResp.class,
          com.tencent.client.worker.protos.CreateResp.getDefaultInstance()));
    }

    public  void createEmbedding(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.RPCEmbedding request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.CreateResp> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.tencent.client.worker.protos.CreateResp.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.tencent.client.worker.protos.CreateResp.class,
          com.tencent.client.worker.protos.CreateResp.getDefaultInstance()));
    }

    public  void init(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.TensorLike request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.tencent.client.worker.protos.VoidResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.tencent.client.worker.protos.VoidResponse.class,
          com.tencent.client.worker.protos.VoidResponse.getDefaultInstance()));
    }

    public  void load(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.LoadTensorLike request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        com.tencent.client.worker.protos.VoidResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.tencent.client.worker.protos.VoidResponse.class,
          com.tencent.client.worker.protos.VoidResponse.getDefaultInstance()));
    }

    public  void save(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.SaveTensorLike request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        com.tencent.client.worker.protos.VoidResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.tencent.client.worker.protos.VoidResponse.class,
          com.tencent.client.worker.protos.VoidResponse.getDefaultInstance()));
    }

    public  void pull(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.PullRequest request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.PullResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(6),
        controller,
        request,
        com.tencent.client.worker.protos.PullResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.tencent.client.worker.protos.PullResponse.class,
          com.tencent.client.worker.protos.PullResponse.getDefaultInstance()));
    }

    public  void push(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.PushRequest request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(7),
        controller,
        request,
        com.tencent.client.worker.protos.VoidResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.tencent.client.worker.protos.VoidResponse.class,
          com.tencent.client.worker.protos.VoidResponse.getDefaultInstance()));
    }

    public  void release(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.TensorLike request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(8),
        controller,
        request,
        com.tencent.client.worker.protos.VoidResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.tencent.client.worker.protos.VoidResponse.class,
          com.tencent.client.worker.protos.VoidResponse.getDefaultInstance()));
    }

    public  void update(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.TensorLike request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(9),
        controller,
        request,
        com.tencent.client.worker.protos.VoidResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.tencent.client.worker.protos.VoidResponse.class,
          com.tencent.client.worker.protos.VoidResponse.getDefaultInstance()));
    }

    public  void sync(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.SyncRequest request,
        com.google.protobuf.RpcCallback<com.tencent.client.worker.protos.VoidResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(10),
        controller,
        request,
        com.tencent.client.worker.protos.VoidResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.tencent.client.worker.protos.VoidResponse.class,
          com.tencent.client.worker.protos.VoidResponse.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public com.tencent.client.worker.protos.CreateResp createTensor(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.RPCTensor request)
        throws com.google.protobuf.ServiceException;

    public com.tencent.client.worker.protos.CreateResp createVariable(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.RPCVariable request)
        throws com.google.protobuf.ServiceException;

    public com.tencent.client.worker.protos.CreateResp createEmbedding(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.RPCEmbedding request)
        throws com.google.protobuf.ServiceException;

    public com.tencent.client.worker.protos.VoidResponse init(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.TensorLike request)
        throws com.google.protobuf.ServiceException;

    public com.tencent.client.worker.protos.VoidResponse load(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.LoadTensorLike request)
        throws com.google.protobuf.ServiceException;

    public com.tencent.client.worker.protos.VoidResponse save(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.SaveTensorLike request)
        throws com.google.protobuf.ServiceException;

    public com.tencent.client.worker.protos.PullResponse pull(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.PullRequest request)
        throws com.google.protobuf.ServiceException;

    public com.tencent.client.worker.protos.VoidResponse push(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.PushRequest request)
        throws com.google.protobuf.ServiceException;

    public com.tencent.client.worker.protos.VoidResponse release(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.TensorLike request)
        throws com.google.protobuf.ServiceException;

    public com.tencent.client.worker.protos.VoidResponse update(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.TensorLike request)
        throws com.google.protobuf.ServiceException;

    public com.tencent.client.worker.protos.VoidResponse sync(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.SyncRequest request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public com.tencent.client.worker.protos.CreateResp createTensor(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.RPCTensor request)
        throws com.google.protobuf.ServiceException {
      return (com.tencent.client.worker.protos.CreateResp) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.tencent.client.worker.protos.CreateResp.getDefaultInstance());
    }


    public com.tencent.client.worker.protos.CreateResp createVariable(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.RPCVariable request)
        throws com.google.protobuf.ServiceException {
      return (com.tencent.client.worker.protos.CreateResp) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.tencent.client.worker.protos.CreateResp.getDefaultInstance());
    }


    public com.tencent.client.worker.protos.CreateResp createEmbedding(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.RPCEmbedding request)
        throws com.google.protobuf.ServiceException {
      return (com.tencent.client.worker.protos.CreateResp) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.tencent.client.worker.protos.CreateResp.getDefaultInstance());
    }


    public com.tencent.client.worker.protos.VoidResponse init(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.TensorLike request)
        throws com.google.protobuf.ServiceException {
      return (com.tencent.client.worker.protos.VoidResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.tencent.client.worker.protos.VoidResponse.getDefaultInstance());
    }


    public com.tencent.client.worker.protos.VoidResponse load(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.LoadTensorLike request)
        throws com.google.protobuf.ServiceException {
      return (com.tencent.client.worker.protos.VoidResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        com.tencent.client.worker.protos.VoidResponse.getDefaultInstance());
    }


    public com.tencent.client.worker.protos.VoidResponse save(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.SaveTensorLike request)
        throws com.google.protobuf.ServiceException {
      return (com.tencent.client.worker.protos.VoidResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        com.tencent.client.worker.protos.VoidResponse.getDefaultInstance());
    }


    public com.tencent.client.worker.protos.PullResponse pull(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.PullRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.tencent.client.worker.protos.PullResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(6),
        controller,
        request,
        com.tencent.client.worker.protos.PullResponse.getDefaultInstance());
    }


    public com.tencent.client.worker.protos.VoidResponse push(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.PushRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.tencent.client.worker.protos.VoidResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(7),
        controller,
        request,
        com.tencent.client.worker.protos.VoidResponse.getDefaultInstance());
    }


    public com.tencent.client.worker.protos.VoidResponse release(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.TensorLike request)
        throws com.google.protobuf.ServiceException {
      return (com.tencent.client.worker.protos.VoidResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(8),
        controller,
        request,
        com.tencent.client.worker.protos.VoidResponse.getDefaultInstance());
    }


    public com.tencent.client.worker.protos.VoidResponse update(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.TensorLike request)
        throws com.google.protobuf.ServiceException {
      return (com.tencent.client.worker.protos.VoidResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(9),
        controller,
        request,
        com.tencent.client.worker.protos.VoidResponse.getDefaultInstance());
    }


    public com.tencent.client.worker.protos.VoidResponse sync(
        com.google.protobuf.RpcController controller,
        com.tencent.client.worker.protos.SyncRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.tencent.client.worker.protos.VoidResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(10),
        controller,
        request,
        com.tencent.client.worker.protos.VoidResponse.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:ClientMaster.ClientWorker)
}

